#
# Anya's Astris script
# 
# Brings up device to Anya mode - basically SecureROM DFU,
# but with custom handle_interface_request() that decrypts
# KBAGs sent over USB
#
# The custom handler is at trampoline base, thus we need
# to make that place executable
#
# Please note that only 16K devices are supported at this moment
#

namespace eval ::anya {
    #
    # Data providers 
    #

    set soc [::astris::console::native::soc full]

    proc data_provider_error {} {
        variable soc
        error [format "failed to get \"%s\" for %s" [info level -1] $soc]
    }

    proc l2_page_size {} {
        return 0x2000000
    }

    proc l3_page_size {} {
        return 0x4000
    }

    proc main_core {} {
        variable soc
        switch $soc {
            "Skye A0"       -
            "Cyprus A0"     -
            "Cyprus B0"     -
            "Cyprus B1"     { return PCORE0 }
            "M9 B0"         -
            "M9 B1"         { return CPU0 }
            "Aruba A1"      { return PCORE0 }
            "Cebu A0"       -
            "Cebu B0"       -
            "Cebu B1"       { return ECORE0 }
            "Sicily A0"     -
            "Sicily B0"     -
            "Sicily B1"     { return ECORE0 }
            "Turks A0"      -
            "Turks B0"      { return CPU0 }
            "Tonga B1"      { return ECORE0 }
            "Ellis A0"      -
            "Ellis B0"      -
            "Ellis B1"      { return ECORE0 }
            "Staten B1"     { return ECORE0 }
            default  {
                data_provider_error
            }
        }
    }

    proc needs_reconnect_after_fromreset {} {
        variable soc

        switch $soc {
            "Turks A0" { return 1 }
            default    { return 0 }
        }
    }

    proc is_mmu_late_deal {} {
        variable soc

        switch $soc {
            "Tonga B1"  -
            "Ellis A0"  -
            "Ellis B0"  -
            "Ellis B1"  -
            "Staten B1" { return 1 }
            default     { return 0 }
        }
    }

    #
    # The next 2 are only for late MMU deal devices
    #

    proc platform_setup_boot_trampoline_exit {} {
        variable soc
        switch $soc {
            "Tonga B1"      { return 0x100007B44 }
            "Ellis A0"      -
            "Ellis B0"      -
            "Ellis B1"      { return 0x1000078C4 }
            "Staten B1"     { return 0x100008674 }
            default  {
                data_provider_error
            }
        }
    }

    proc arch_tlb_flush {} {
        variable soc
        switch $soc {
            "Tonga B1"      { return 0x1000004D0 }
            "Ellis A0"      -
            "Ellis B0"      -
            "Ellis B1"      { return 0x100000554 }
            "Staten B1"     { return 0x100000554 }
            default  {
                data_provider_error
            }
        }
    }

    #
    # The next one is only for early MMU deal devices
    #

    proc before_tlb_flush {} {
        variable soc
        switch $soc {
            "Skye A0"       { return 0x1000016F4 }
            "Cyprus A0"     -
            "Cyprus B0"     -
            "Cyprus B1"     { return 0x100001704 }
            "M9 B0"         -
            "M9 B1"         { return 0x1000016F8 }
            "Aruba A1"      { return 0x10000171C }
            "Cebu A0"       -
            "Cebu B0"       -
            "Cebu B1"       { return 0x10000180C }
            "Sicily A0"     { return 0x10000CBD4 }
            "Sicily B0"     { return 0x10000C544 }
            "Sicily B1"     { return 0x10000C884 }
            "Turks A0"      { return 0x10000D114 }
            "Turks B0"      { return 0x10000CDA4 }
            default  {
                data_provider_error
            }
        }
    }

    proc sram_base {} {
        variable soc
        switch $soc {
            "Skye A0"       { return 0x180000000 }
            "Cyprus A0"     -
            "Cyprus B0"     -
            "Cyprus B1"     { return 0x19C000000 }
            "M9 B0"         -
            "M9 B1"         { return 0x180000000 }
            "Aruba A1"      { return 0x19C000000 }
            "Cebu A0"       -
            "Cebu B0"       -
            "Cebu B1"       { return 0x19C000000 }
            "Sicily A0"     -
            "Sicily B0"     -
            "Sicily B1"     { return 0x1FC000000 }
            "Turks A0"      -
            "Turks B0"      { return 0x180000000 }
            "Tonga B1"      { return 0x1FC000000 }
            "Ellis A0"      -
            "Ellis B0"      -
            "Ellis B1"      { return 0x1FC000000 }
            "Staten B1"     { return 0x1FC000000 }
            default  {
                data_provider_error
            }
        }
    }

    proc trampoline {} {
        variable soc
        switch $soc {
            "Skye A0"       { return 0x180018000 }
            "Cyprus A0"     { return 0x19C1C8000 }
            "Cyprus B0"     -
            "Cyprus B1"     { return 0x19C018000 }
            "M9 B0"         -
            "M9 B1"         { return 0x1801C8000 }
            "Aruba A1"      { return 0x19C018000 }
            "Cebu A0"       -
            "Cebu B0"       -
            "Cebu B1"       { return 0x19C018000 }
            "Sicily A0"     -
            "Sicily B0"     -
            "Sicily B1"     { return 0x1FC02C000 }
            "Turks A0"      -
            "Turks B0"      { return 0x1803A0000 }
            "Tonga B1"      { return 0x1FC02C000 }
            "Ellis A0"      -
            "Ellis B0"      -
            "Ellis B1"      { return 0x1FC02C000 }
            "Staten B1"     { return 0x1FC02C000 }
            default  {
                data_provider_error
            }
        }
    }

    proc platform_get_force_dfu_ret {} {
        variable soc
        switch $soc {
            "Skye A0"       { return 0x100007BA4 }
            "Cyprus A0"     { return 0x1000070A0 }
            "Cyprus B0"     { return 0x1000072A4 }
            "Cyprus B1"     { return 0x1000072CC }
            "M9 B0"         -
            "M9 B1"         { return 0x100007690 }
            "Aruba A1"      { return 0x10000796C }
            "Cebu A0"       -
            "Cebu B0"       -
            "Cebu B1"       { return 0x1000079AC }
            "Sicily A0"     { return 0x100008898 }
            "Sicily B0"     { return 0x1000083B4 }
            "Sicily B1"     { return 0x100008464 }
            "Turks A0"      { return 0x100009338 }
            "Turks B0"      { return 0x100008E64 }
            "Tonga B1"      { return 0x100008B88 }
            "Ellis A0"      -
            "Ellis B0"      -
            "Ellis B1"      { return 0x10000883C }
            "Staten B1"     { return 0x1000095EC }
            default  {
                data_provider_error
            }
        }
    }

    proc handle_interface_request_intercept {} {
        variable soc
        switch $soc {
            "Skye A0"       { return 0x10000BBD0 }
            "Cyprus A0"     { return 0x10000E018 }
            "Cyprus B0"     { return 0x10000E350 }
            "Cyprus B1"     { return 0x10000E390 }
            "M9 B0"         -
            "M9 B1"         { return 0x10000E334 }
            "Aruba A1"      { return 0x10000ED9C }
            "Cebu A0"       -
            "Cebu B0"       -
            "Cebu B1"       { return 0x10000EF04 }
            "Sicily A0"     { return 0x1000126EC }
            "Sicily B0"     { return 0x10001205C }
            "Sicily B1"     { return 0x1000124A0 }
            "Tonga B1"      { return 0x100012FEC }
            "Turks A0"      { return 0x10001240C }
            "Turks B0"      { return 0x1000121A0 }
            "Ellis A0"      { return 0x100013EC8 }
            "Ellis B0"      -
            "Ellis B1"      { return 0x1000140E4 }
            "Staten B1"     { return 0x100015170 }
            default  {
                data_provider_error
            }
        }
    }

    proc handle_interface_request_intercept_reg {} {
        variable soc
        switch $soc {
            "Skye A0"       { return x8 }
            "Cyprus A0"     -
            "Cyprus B0"     -
            "Cyprus B1"     { return x9 }
            "M9 B0"         -
            "M9 B1"         { return x9 }
            "Aruba A1"      { return x9 }
            "Cebu A0"       -
            "Cebu B0"       -
            "Cebu B1"       { return x9 }
            "Sicily A0"     -
            "Sicily B0"     { return x9 }
            "Sicily B1"     { return x9 }
            "Turks A0"      -
            "Turks B0"      { return x9 }
            "Tonga B1"      { return x9 }
            "Ellis A0"      -
            "Ellis B0"      -
            "Ellis B1"      { return x16 }
            "Staten B1"     { return x16 }
            default  {
                data_provider_error
            }
        }
    }

    proc override_boot_selector_addr {} {
        variable soc
        switch $soc {
            "Turks A0" { return 0x100001864 }
            "Turks B0" { return 0x100001884 }
            default    { return 0 }
        }
    }

    proc override_boot_selector_reg {} {
        variable soc
        switch $soc {
            "Turks A0" -
            "Turks B0" { return x20 }
            default    {
                data_provider_error
            }
        }
    }

    proc override_boot_selector_value {} {
        variable soc
        switch $soc {
            "Turks A0" -
            "Turks B0" { return 10 }
            default    {
                data_provider_error
            }
        }
    }

    proc platform_get_iboot_flags_ret {} {
        variable soc
        switch $soc {
            "Skye A0"       { return 0x100007010 }
            "Cyprus A0"     { return 0x100006044 }
            "Cyprus B0"     -
            "Cyprus B1"     { return 0x10000616C }
            "M9 B0"         -
            "M9 B1"         { return 0x1000064FC }
            "Aruba A1"      { return 0x100006784 }
            "Cebu A0"       -
            "Cebu B0"       -
            "Cebu B1"       { return 0x10000679C }
            "Sicily A0"     { return 0x100007370 }
            "Sicily B0"     { return 0x100006EA4 }
            "Sicily B1"     { return 0x100006F18 }
            "Turks A0"      { return 0x100007DAC }
            "Turks B0"      { return 0x100007898 }
            "Tonga B1"      { return 0x100007578 }
            "Ellis A0"      -
            "Ellis B0"      -
            "Ellis B1"      { return 0x100007344 }
            "Staten B1"     { return 0x100008144 }
            default  {
                data_provider_error
            }
        }
    }

    #
    # Flow routines
    #

    proc wait_for_state {state} {
        while {true} {
            if {[::astris::console::native::support::check_state [list $state]]} {
                return
            } else {
                after 50
            }
        }
    }

    proc wait_for_bp {addr} {
        set bp [::astris::console::native::bp set $addr]
        ::astris::console::native::go
        wait_for_state "HardwareBreak"
        ::astris::console::native::bp clear $bp
    }

    proc wait_for_run {} {
        ::astris::console::native::go 
        wait_for_state "Run"
    }

    #
    # Logic routines
    #

    proc mmu_l3_page_make {addr} {
        set addr [expr $addr >> 14]
        set e 0b11            
        set e [expr $e | 1 << 2]
        set e [expr $e | 0b111 << 5]
        set e [expr $e | 0b11 << 9]
        set e [expr $e | $addr << 14]
        
        return $e
    }

    proc mmu_l3_page_entry_find {table page} {
        return [expr $table + $page * 8]
    }

    proc mmu_l3_table_find {ttbr base} {
        set table_entry_addr [expr $ttbr + $base / [l2_page_size] * 0x8]
        set table_entry [::astris::console::native::mem -64 $table_entry_addr]
        return [expr $table_entry >> 14 << 14 & 0xFFFFFFFFF]
    }

    proc mmu_rx_page_set {base addr} {
        set ttbr [::astris::console::native::reg ttbr0_el1]
        set table [mmu_l3_table_find $ttbr $base]
        set page_entry [mmu_l3_page_entry_find $table [expr [expr $addr - $base] / [l3_page_size]]]
        ::astris::console::native::mem -64 $page_entry [mmu_l3_page_make $addr]
    }

    proc mmu_deal_early {} {
        variable payload
        variable payload_base

        puts "Dealing with MMU..."
        
        wait_for_bp [before_tlb_flush]

        puts "Uploading USB handler..."
        ::astris::console::native::load -memap 4 -width 8 $payload $payload_base

        mmu_rx_page_set [sram_base] $payload_base
    }

    proc mmu_deal_late {} {
        variable payload
        variable payload_base

        puts "Dealing with MMU..."
        
        wait_for_bp [platform_setup_boot_trampoline_exit]

        puts "Uploading USB handler..."
        ::astris::console::native::load -memap 4 -width 8 $payload $payload_base

        mmu_rx_page_set [sram_base] $payload_base

        ::astris::console::native::reg pc [arch_tlb_flush]
    }

    #
    # Actual logic
    #

    if {![info exists env(ANYA_PAYLOAD)]} {
        error "ANYA_PAYLOAD variable not set"
    }

    set payload $::env(ANYA_PAYLOAD)
    set payload_base [trampoline]

    ::astris::soc::fromreset

    #
    # Some cursed targets like Turks A0
    # would reconnect for a bit after fromreset
    #

    if {[needs_reconnect_after_fromreset]} {
        after 100
        ::astris::console::native::explore    
    }

    ::astris::console::native::cpu [main_core]

    if {![is_mmu_late_deal]} {
        mmu_deal_early
    }

    puts "Forcing DFU..."
    wait_for_bp [platform_get_force_dfu_ret]
    ::astris::console::native::reg x0 0x1

    if {[is_mmu_late_deal]} {
        mmu_deal_late
    }

    #
    # Some cursed targets like Turks A0
    # enforce RSM DFU by default, so we want
    # to override it back to good ole USB DFU
    #

    if {[override_boot_selector_addr]} {
        puts "Overriding boot selector..."
        wait_for_bp [override_boot_selector_addr]
        ::astris::console::native::reg [override_boot_selector_reg] [override_boot_selector_value]
    }

    puts "Patching iBoot flags..."
    wait_for_bp [platform_get_iboot_flags_ret]
    ::astris::console::native::reg x0 [expr [::astris::console::native::reg x0] | [expr 1 << 6]]

    puts "Overriding USB handler ptr..."
    wait_for_bp [handle_interface_request_intercept]
    ::astris::console::native::reg [handle_interface_request_intercept_reg] $payload_base

    #
    # SEP "warm up" is needed for some newer targets such as Ellis,
    # where AP will panic for some unobvious reasons if one doesn't
    # do this or reopen Astris after this script is done
    #

    if {[info exists env(ANYA_SEP_WARMUP)] && $::env(ANYA_SEP_WARMUP)} {
        puts "Warming up SEP..."
        ::astris::console::native::cpu "SEP"
        ::astris::console::native::halt -q
        ::astris::console::native::go
        ::astris::console::native::cpu [main_core]
    }

    wait_for_run

    puts "DONE!"
}
