#!/usr/bin/env python3

import argparse
from time import perf_counter
from secrets import token_bytes

from anya import *

def hexint(string: str) -> int:
    return int(string, 16)

def main():
    parser = argparse.ArgumentParser(description="decrypt some KBAG or run a benchmark")
    parser.add_argument("-k", dest="kbag", help="decrypt a KBAG")
    parser.add_argument("-b", dest="count", type=int, help="run benchmark")
    parser.add_argument("-s", dest="sep", action="store_true", help="use SEP GID (if possible)")
    parser.add_argument("-e", dest="ecid", type=hexint, help="ECID to look for")
    args = parser.parse_args()

    if (not args.kbag and not args.count) or (args.kbag and args.count):
        parser.print_help()
        exit(-1)

    dev = AnyaDevice(ecid=args.ecid)

    try:
        dev.connect()
    except AnyaError as e:
        print("failed to connect - %s" % str(e))
        exit(-1)

    dev.print_device()

    if args.sep:
        try:
            if not dev.ping_sep():
                print("SEP is unreachable")
                dev.disconnect()
                exit(-1)
        except AnyaError as e:
            print("failed to ping SEP - %s" % str(e))
            dev.disconnect()
            exit(-1)

        print("will use SEP GID")

    if args.kbag:
        try:
            decoded = decode_kbag(args.kbag)
        except AnyaValueError as e:
            print("failed to parse KBAG - %s" % str(e))
            dev.disconnect()
            exit(-1)

        try:
            key = dev.decrypt_kbag(decoded, sep=args.sep)
        except AnyaError as e:
            print("failed to decrypt KBAG - %s" % str(e))
            dev.disconnect()
            exit(-1)

        print(encode_key(key, True))

    elif args.count:
        kbags = list()

        for i in range(args.count):
            kbags.append(bytes(token_bytes(KBAG_SIZE)))

        print("decrypting...")

        start = perf_counter()

        try:
            dev.decrypt_kbags(kbags, sep=args.sep)
        except AnyaError as e:
            print("failed to decrypt KBAG - %s" % str(e))
            dev.disconnect()
            exit(-1)

        end = perf_counter()

        delta = end - start
        average = args.count / delta

        print("decrypted %d KBAGs in %.3f seconds, average - %.3f KBAGs/sec" % (args.count, delta, average))

    dev.disconnect()

if __name__ == '__main__':
    main()
